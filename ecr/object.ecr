<%= require_file(object.parent) -%>
<% object.interfaces.each do |interface| -%>
  <%= require_file(interface) %>
<% end %>

module <%= namespace_name %>
  <% if g_object_type? %>
  # :nodoc:
  annotation GeneratedWrapper
    # This annotation is used to identify user types that inherit from GObject from binding types that does the same.
  end
  <% end %>

  <% render_doc(object) -%>
  @[GObject::GeneratedWrapper]
  class <%= type_name %> <%= parent_class %>
    <% object.interfaces.each do |interface| -%>
    include <%= to_crystal_type(interface, namespace != interface.namespace) %>
    <% end %>

    @pointer : Pointer(Void)

    <% if g_object_type? %>
    macro inherited
      {% unless @type.annotation(GObject::GeneratedWrapper) %}
      @@_g_type : UInt64 = 0

      private def self._class_init(klass : Pointer(LibGObject::TypeClass), user_data : Pointer(Void)) : Nil
      end

      private def self._instance_init(instance : Pointer(LibGObject::TypeInstance), type : Pointer(LibGObject::TypeClass)) : Nil
        gi_instance = instance.as(Pointer(LibGICrystal::Object))
        gi_instance.value.gc_collected = 0
        gi_instance.value.crystal_instance_address = 0_u64
      end

      def self.g_type : UInt64
        if LibGLib.g_once_init_enter(pointerof(@@_g_type)) != 0
          g_type = LibGObject.g_type_register_static_simple({{ @type.superclass.id }}.g_type,
                                                            {{ @type.stringify }},
                                                            sizeof(LibGObject::ObjectClass),
                                                            ->_class_init,
                                                            sizeof(LibGICrystal::Object),
                                                            ->_instance_init,
                                                            0)
          LibGLib.g_once_init_leave(pointerof(@@_g_type), g_type)
        end

        @@_g_type
      end

      def self.new
        instance = {{ @type.id }}.allocate
        gobj_ptr = LibGObject.g_object_newv({{ @type.id }}.g_type, 0, Pointer(Void).null)
        LibGObject.g_object_ref_sink(gobj_ptr) if LibGObject.g_object_is_floating(gobj_ptr) == 1

        gobj_ptr.as(Pointer(LibGICrystal::Object)).value.crystal_instance_address = instance.object_id

        instance.initialize(gobj_ptr, :full)
        GC.add_finalizer(instance)
        instance
      end

      def initialize(pointer : Pointer(Void), transfer : GICrystal::Transfer)
        super
      end

      def finalize
        @pointer.as(Pointer(LibGICrystal::Object)).value.gc_collected = 1
        super
      end

      # Cast a `GObject::Object` to this type, throw `TypeCastError` if cast can't be made.
      def self.cast(obj : GObject::Object) : self
        cast?(obj) || raise TypeCastError.new("can't cast #{typeof(obj).name} to #{{{ @type.stringify }}}")
      end

      # Cast a `GObject::Object` to this type, returns nil if cast can't be made.
      def self.cast?(obj : GObject::Object) : self?
        return if LibGObject.g_type_check_instance_is_a(obj, g_type).zero?

        gi_gobject = obj.to_unsafe.as(Pointer(LibGICrystal::Object))

        # If the object was collected by Crystal GC but still alive in C world we can't bring
        # the crystal object form the dead.
        raise GICrystal::ObjectCollectedError.new if gi_gobject.value.gc_collected != 0

        instance_address = gi_gobject.value.crystal_instance_address
        return Pointer({{ @type.id }}).new(instance_address).as({{ @type.id }}) unless instance_address.zero?

        # If the object was born in C world, crystal instance address still NULL
        # So we create a Crystal instance for it and annotate the crystal instance address
        new_instance = {{ @type.id }}.new(obj.to_unsafe, :none)
        new_instance.to_unsafe.as(Pointer(LibGICrystal::Object)).value.crystal_instance_address = new_instance.object_id
        new_instance
      end
      {% end %}
    end
    <% end %>

    # :nodoc:
    def initialize(@pointer, transfer : GICrystal::Transfer)
      <% if object.parent.nil? %>
        LibGObject.<%= object.ref_function %>(self) unless transfer.full?
      <% else %>
        super
      <% end %>
    end

    <% if all_properties.any? -%>
      <% render "ecr/gobject_constructor.ecr" %>
    <% end %>

    <% if object.parent.nil? %>

      # Called by the garbage collector. Decreases the reference count of object.
      # (i.e. its memory is freed).
      def finalize
        {% if flag?(:debugmemory) %}
        LibC.printf("~%s at %p - ref count: %d\n", self.class.name.to_unsafe, self, ref_count)
        {% end %}
        LibGObject.<%= object.unref_function %>(self)
      end

      # Returns a pointer to the C object.
      def to_unsafe
        @pointer
      end

      <% render "ecr/cast_methods.ecr" %>
      <% render "ecr/ref_count_method.ecr" %>
    <% end %>

    <% render "ecr/g_type_method.ecr" %>
    <% render_properties %>
    <% render_methods %>
    <% render_signals %>
  end
end
